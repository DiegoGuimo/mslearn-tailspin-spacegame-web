trigger:
- '*'

pool:
  name: 'RetoAzure'  
  demands:
    - agent.name -equals MyAgent

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.x'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: UseNode@1
  displayName: 'Install Node.js 16.x'
  inputs:
    version: '16.x'

- script: 'npm cache clean --force'
  displayName: 'Clean NPM cache'

- script: 'if exist node_modules rmdir /s /q node_modules'
  displayName: 'Delete node_modules directory'
  condition: succeededOrFailed()

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false
    arguments: '--no-optional'

- script: 'npx sass $(wwwrootDir) --no-source-map --style=compressed'
  displayName: 'Compile Sass assets'

- script: 'npm install --global gulp-cli'
  displayName: 'Install Gulp CLI globally'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

# ✅ Instalar Azure Artifacts Credential Provider
- task: PowerShell@2
  displayName: 'Install Azure Artifacts Credential Provider'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    targetType: 'inline'
    script: |
      Invoke-WebRequest -Uri https://aka.ms/install-artifacts-credprovider.ps1 -OutFile install-artifacts-credprovider.ps1
      ./install-artifacts-credprovider.ps1


# ✅ Restaurar dependencias con soporte para autenticación en Azure Artifacts
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    arguments: '--interactive'

# ✅ Construcción del proyecto
- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

# ✅ Ejecutar pruebas y generar cobertura de código
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

# ✅ Instalar y generar reportes de cobertura
- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

# ✅ Empaquetar el proyecto para Azure Artifacts
- task: DotNetCoreCLI@2
  displayName: 'Pack the project - $(buildConfiguration)'
  inputs:
    command: 'pack'
    projects: '**/*.csproj'
    arguments: '--no-build --configuration $(buildConfiguration)'
    versioningScheme: byPrereleaseNumber
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0'

# ✅ Publicar el paquete en Azure Artifacts
- task: NuGetCommand@2
  displayName: 'Publish NuGet package to Azure Artifacts'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    feedPublish: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'
    allowPackageConflicts: true
  condition: succeeded()

# ✅ Publicar el proyecto
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()